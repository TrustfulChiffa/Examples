// Метод, который создаёт массив с 9 случайными элементами
// void метод, который ничего не возвращает
// название, например FillArray. Аргумент называем коллекцией

void FillArray(int[] collection)
{
    //Ищем длинну массива
    int length = collection.Length;
    // Берем первую позицию с 0
    int index = 0;
    //прописываем цикл до длинны массива
    while (index < length)
    {
        //обращаемся к аргументу (коллекция) на позицию (индекс) и положить туда новое случайное целое число [1, 10)
        collection[index] = new Random().Next(1, 10);

        // Переключение позиции
        index++;
    }
}

///////////////////////////////////////////////////////////////////////////////////////////
// Создаём void, который будет печатать массив (назовем PrintArray)
// Тут вместо collection будет просто col
void PrintArray(int[] col)
{
    // Обозначаем колличество элементов через счетчик count
    int count = col.Length;
    //Позицию можем обозначить не через переменную index, а сразу через саму позицию
    int position = 0;
    //Делаем цикл до того, пока позиция меньше счетчика
    while (position < count)
    {
        //будем выводить в концоль значение текущего элемента
        Console.WriteLine(col[position]);
        // двигаем счетчик
        position++;
    }

}

///////////////////////////////////////////////////////////////////////////////////////////

// Решаем задачу 010 с использованием метода
// Пишем метод отличный от void. В данном случае он будет возвращать позицию (index)

// Сюда у нас будет приходить массив collection и какой-то элемент find
int IndexOf(int[] collection, int find)
{
    //определяем количество элементов
    int count = collection.Length;
    //переменная для переключение индекса
    int index = 0;
    // переменная для сохранения позиции. Не элегантно, но пойдёт
    int position = -1; //-1 чтобы при отсутствии элемента нас возвращало к нему, а не к 0, то есть первому. Можно другой, лишь бы его в массиве не было(-2 тоже подойдет)

    //цикл по поиску искомого элемента
    while (index < count)
    {
        if (collection[index] == find)
        {
            position = index;
            //чтобы искало не по последнему подходящему элементу его индекс, а по первому, прерываем через break
            break;
        }
        index++;
    }
    return position;
}

///////////////////////////////////////////////////////////////////////////////////////////

// Создаём массив в котором, например, по умолчанию будет 10 элементов
int[] array = new int[10]; //создай новый массив в котором будет 10 элементов. Он будет наполнен нулями. Поэтому пользуемся методами


// Вызываем наш метод FillArray для создания массива с 9 числами
// в качестве аргумента используем array

FillArray(array);

// Вызываем метод PrintArray, который будет печатать наш массив
// в качестве аргумента используем array
PrintArray(array);

//делаем пустую строчку чтоб отделить искомое значение от элементов массива
Console.WriteLine();

//определяем переменную pos и в нее кладем результат работы метода IndexOf с аргументом array (наш массив) и искомый элемент, например 4
int pos = IndexOf(array, 4);
//показываем на экране после отработки метода наш pos
Console.WriteLine(pos);